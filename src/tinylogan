#! /usr/bin/python
# -*- coding: utf-8 -*-

# "172.16.245.69 - - [11/Apr/2011:16:06:10 +0200] GET /URL HTTP/1.1" 200 55700 7/7124818
# "172.16.245.69 - - [11/Apr/2011:16:06:10 +0200] GET /URL HTTP/1.1" 304 - 0/15625

import sys
import re
import optparse

PATTERN = r""".*?\[(?P<date>.*?)\:(?P<time>.*?)\] "(?:GET|POST) (?P<url>.*?)(?:\?.*?)? HTTP\/.*?" (?P<code>\d\d\d).*(?P<sec>\d+)\/(?P<micros>\d+)"""
logLine = re.compile(PATTERN, re.I)

KEEP_TOTAL = 50
KEEP_AVERAGE = 50

def numeric_compare_total(x, y):
    return x['micros'] - y['micros']

def numeric_compare_average(x, y):
    return x['average'] - y['average']

def main(logfile):
    log = open(logfile)
    
    lncount = 0
    registry = {}
    topTotal = []
    topAverage = []
    lastProcessedDate = None
    lastProcessedTime = None

    for l in log:
        lncount+=1
                
        matches = logLine.match(l)
        if matches is None:
            continue

        lineData = matches.groupdict()

        lastProcessedDate = lineData.get('date')
        lastProcessedTime = lineData.get('time')
        
        if lncount==1:
            print "Starting from %s:%s" % (lastProcessedDate, lastProcessedTime)
        
        # {'url': '/URL', 'sec': '7', 'code': '200', 'micros': '7124818'}
        url = lineData['url']
        if not registry.get(url):
            registry[url] = {'micros': int(lineData['micros']), 'times': 1, 'url': url}
        else:
            registry[url]['micros'] = registry[url]['micros'] + int(lineData['micros'])
            registry[url]['times'] += 1        

        # statistics
        registry[url]['average'] = registry[url]['micros']/registry[url]['times']
        
        try:
            topTotal.index(registry[url])
        except ValueError:
            topTotal.append(registry[url])
            topTotal.sort(numeric_compare_total, reverse=True)
            topTotal = topTotal[:KEEP_TOTAL]

        try:
            topAverage.index(registry[url])
        except ValueError:
            topAverage.append(registry[url])
            topAverage.sort(numeric_compare_average, reverse=True)
            topAverage = topAverage[:KEEP_AVERAGE]

    print "Ending at %s:%s" % (lastProcessedDate, lastProcessedTime)
    
    log.close()

    print "Top total time"
    cnt = 0
    for x in topTotal:
        cnt+=1
        print "  %04d - %s %0.3f (%d times, average %0.3f)" % (cnt,
                                                               x['url'], 
                                                               float(x['micros'])/(1000*1000),
                                                               x['times'],
                                                               float(x['micros'])/x['times']/(1000*1000),
                                                               )
    print ""
    print "Top average time"
    cnt = 0
    for x in topAverage:
        cnt+=1
        print "  %04d - %s %0.3f (%d times, %d total)" % (cnt,
                                                          x['url'],
                                                          float(x['average'])/(1000*1000),
                                                          x['times'],
                                                          float(x['average'])/(1000*1000) * x['times'],
                                                          )

if __name__ == '__main__':
    
    main(sys.argv[1])
